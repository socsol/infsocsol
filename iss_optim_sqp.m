function [UOptimal, flag] = iss_optim_sqp(UStart, Value, StateVars, ...
                                          DeltaFunction, ...
                                          StageReturnFunction, ...
                                          StateLB, StateUB, Conf)

States = Conf.States;
CodingVector = Conf.CodingVector;
DiscountFactor = Conf.DiscountFactor;
UserConstraintFunctionFile = Conf.UserConstraintFunctionFile;
UserConstraintFunction = Conf.UserConstraintFunction;
Options = Conf.Options;

% Test an evaluation of the user constraint function, if there is one.
if ~isempty(UserConstraintFunction)
  [test_c, test_ceq] = UserConstraintFunction(UStart, StateVars, Conf.Options.TimeStep, Conf);
else
  test_c = [];
  test_ceq = [];
end

if all([size(Options.Aeq), size(Options.beq)] > 0) || ~isempty(test_c)
  G = @(u) iss_sqp_g(u, StateVars, Options.Aeq, Options.beq, UserConstraintFunction, Conf);
else
  G = [];
end

if all([size(Options.A), size(Options.b)] > 0) || ~isempty(test_ceq)
  H = @(u) iss_sqp_h(u, StateVars, Options.A, Options.b, UserConstraintFunction, Conf);
else
  H = [];
end

try
  if Options.StochasticProblem
    [UOptimal, ignore, info] = sqp(UStart, @(U) CostStoch(U, ...
                                                          DeltaFunction, ...
                                                          StageReturnFunction, ...
                                                          UserConstraintFunction, ...
                                                          StateLB, ...
                                                          Options.StateStepSize,
                                                          Options.TimeStep, ...
                                                          DiscountFactor, ...
                                                          Conf.Dimension, ...
                                                          States,CodingVector, ...
                                                          StateVars, ...
                                                          Value,Conf, ...
                                                          Options.Noise, ...
                                                          Options.NoiseSteps, ...
                                                          Options.NoiseProb, ...
                                                          Options.NoisyVars), ...
                                   G, ...
                                   H, Options.ControlLB, ...
                                   Options.ControlUB, ...
                                   Options.MaxIter, ...
                                   Options.TolX);
  else
    [UOptimal, ignore, info] = sqp(UStart, @(U) CostDeter(U, ...
                                                          DeltaFunction, ...
                                                          StageReturnFunction,...
                                                          UserConstraintFunction,...
                                                          StateLB, ...
                                                          Options.StateStepSize,
                                                          Options.TimeStep,...
                                                          DiscountFactor, ...
                                                          Conf.Dimension, ...
                                                          States, ...
                                                          CodingVector,
                                                          StateVars,...
                                                          Value, ...
                                                          Conf), ...
                                   G, H, Options.ControlLB, ...
                                   Options.ControlUB, ...
                                   Options.MaxIter, ...
                                   Options.TolX);
  end

  % Munge the "info" into a MATLAB-equivalent flag.
  info
  if info == 101
    flag = 1;
  else
    flag = -2;
  end
catch
  err = lasterror;
  err.message

  for i = 1:length(err.stack)
    fprintf('%s on line %i\n', err.stack(i).file, err.stack(i).line);
  end

  UOptimal = UStart;
  flag = -2;
end
